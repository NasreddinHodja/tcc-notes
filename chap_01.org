#+title: Chap. 1: Introduction

* X Window System Concepts [1.2]
** Displays and Screens [1.2.1]
+ _Display_: workstation consisting of keyboard, pointing device, and 1+ screen.

As long as multiple screens are controlled by a single user with a single keyboard and pointing device, they compromise a *single display*.

** The Server-Client Model [1.2.2]
+ X is a _network-oriented_ windowing system.
+ An app need not be running on the same system that actually supports the display.
+ Only TCP/IP and DECnet networks are supported by the X Consortium and most vendors.

+ *The server acts as an intermediary between user programs (called /clients/ or /applications/) running on local or remote systems and the resources of the local system.*

The server performs the following tasks:
+ allow access to the display to multiple clients
+ interprets network messages from clients
+ passes user input to the clients by senting network messages
+ does 2-dimensional drawing: graphics are performed by the display server rather than the client
+ maintains complex data structs (windows, cursors, fonts, graphics contexts, etc) as /resources/ that can be shared between clients and referred to simply by resource IDs.
  - server-maintained resources reduce the amout of data that has to be maintained by each client and the amout of data that has to be transferred over the network

** Window Management [1.2.3]
+ _Window manager_: controls screen layout/appearance and the style of user interaction with the system.
+ _Window layout policy_: set of rules that specify allowable sizes and positions of windows and icons.

X does not mandate a particular type of window manager!
+ X devs have tried to make X as free of window management or user interface policy as possible.

** Events [1.2.4]
+ Pnclude user input as well as interaction with other programs (e.g.: overlapping windows).
+ Placed on a *queue* in the order that they occur.
+ X programs do not poll for input!
+ unlike traditional programs, X programs must be ready for *any kind event at any time*

** Extensions to X [1.2.5]
+ X is /extensible/.
+ Extentions are used just like the core Xlib routines and perform at the same level.
+ Extensions have both client-side and server-side code.
+ Before using the extension, you must query the server to see if the extension is supported.

* X Window System Software Architecture [1.3]
#+attr_html: :width 500px
[[./imgs/fig1_3.png]]

+ A display server is a program that runs on each system that supports a graphics display, keyboard, and a mouse.
+ Applications communicate with the server by means of calls to a low-level lib of C language routines known as /Xlib/.
+ Xlib calls are translated to protocol requests sent via tcp/ip either to the local server or to another server across the network.
+ The window manager is just another program written with the X library, except that by convention it is given special authority to controll the layout and style of windows on the screen.
+ _Client_: slightly more general term than application
  - All clients escept the window manager are called applicaitons.
+ _Toolkits_: implement a set of user interface features and allow applications to manipulate these features using OOP.
* Overview of Xlib [1.4]
Grouping Xlib routines according to their major function:
+ _Color_ (chap 7): routines to change how colors drawn by app are interpreted on the screeen.
+ _Cursors_ (chap 6): routines to change shape and colors of image that tracks pointer on screen.
+ _Data_ (chap 15): mechanisms to associate data with windows or numbers.
+ _Display Connection_ (chap 3): routines to connect and disconnect an app with a display, possibly across the network.
+ _Display and Server Specifications_ (vol 1): macros and equivalent funcs that provide information about a particular server implementation and the connected display hardware.
+ _Drawing_ (chap 6): routines to draw dots, lines, rectangles, polygons, and arcs, and an analogous set ot fill the last three.
+ _Errors_ (chap 2): routines to set the functions called when errors occur.
+ _Events_ (chap 8): routines to get input from user, from other apps, and from the server. In X, these are collectively called events.
+ _Extentions_ (chap 15): routines to find out what extentions are available on a particular server and get information about how to use one.
+ _Fonts_ (chap 6): routines to list available fonts, load fonts, and find out thei characteristics.
+ _Geometry_ (chap 13): routines to manipulate and translate geometry specifications.
+ _Graphics Context_ (chap 5): routines to set the way drawing requests are interpreted.
+ _Host Access_ (chap 15): routines to control access to a server from other machines connected in a network.
+ _Images_ (chap 6): routines to get, display, or manipulate screen images.
+ _Interclient Communication_ (chap 12): routines enabling any client to make available information for any other client to read.
+ _Internationalization_ (chap 6, 10, 11): funcs to handle user input and draw text independent of language.
+ _Keyboard_ (chap 9): funcs to modify the way keyboard input is handled, including keyboard mapping.
+ _Pointer_ (chap 9): funcs to modify the way pointer input is handled.
+ _Regions_ (chap 6): routines to perform mathematical operations on polygonal regions.
+ _Resource_ (chap 13, 14): routines to make managing user preferences and command line arguments easier.
+ _Screen saver_ (chap 15): routines to set the operating characteristics of the daemon that blanks the screen when the keyboard and pointer have been idle for a time.
+ _Text_ (chap 6): routines for drawing text and for determining the size of a string to be drawn.
+ _User Preferences_ (chap 9): routines for setting and getting the keyboard click and auto-repeat settings.
+ _Window Attributes_ (chap 4): routines for setting and getting the current characteristics of a window.
+ _Window Life_ (chap 3): routines to create and destroy a window.
+ _Window Management_ (chap 16): routines to allow the manipulation of windows around the screen, and their apparent position above or bellow other windows.
