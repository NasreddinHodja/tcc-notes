#+title: Chap 2: X Concepts

* How Xlib Works [2.1]
Why X was designed:
1. Provide windows on bitmapped terminals.
   - Done in a way that it is easily portable to many different brands of hardware.
   - *The code was designed to stress portability.*
2. Allow many different types of machines to cooperate within a network.
   - The first thing that was determined about X was the protocol used to communicate across the network
3. The devs decided that X should not require (or even imply) a particular style of user interface

To work over a network, there had to be programs that run on both ends of the connection to send and receive information and to interpret it.
+ The end that controlls the display and input devices is the *server*.
+ At the other end are *clients* -- programs written using Xlib to interface with the X protocol.

** The X Protocol [2.1.1]
+ Specifies what makes up each packet of information transferred between the server and Xlib in both directions.
+ There are 4 types of packets that get transferred via the protocol:
  1. requests
  2. replies
  3. events
  4. errors

+ A protocol _request_ is generated by Xlib and sent to the server.
  - Most Xlib routines generate protocol requests.
  - Except routines that only affect data structures local to Xlib and do not interfere with the server.

+ A protocol _reply_ is sent from the server to Xlib in response to certain requests.
  - An Xlib routine that requires a reply is called a /round-trip request/.
  - Round-trip requests *have to be minimized* in clients because they lower performance when there are network delays.

+ An _event_ is sent from the server to Xlib and contains information about a device action or about a side effect of a previous request.
  - Events are kept in a queue in Xlib and can be read one at a time by the client.
  - The range of types of events that the server sends to a client is specified by the client.

+ An _error_ tells the client that a previous request was invalid.
  - Like an event but handled slightly differently within Xlib.
  - Errors are sent to an error-handling routine in Xlib.
  - Default error handlers (print message and exit) can be replaces by a client-specific error-handling routine.

** Buffering [2.1.2]
+ Xlib saves up requests instead of sending them to the server immediately, so that the *client program can continue running instead of waiting to gain access to the network after every Xlib call*.
  - Possible because most Xlib calls do not require immediate action by the server.
  - Increases performance of most networks: transactions are longer and less numerous, reducing total overhead involved.

Xlib sends the buffer full of requests to the server under three conditions.
1. Most common is when an application calls an Xlib routine to wait for an event but no matching event is currently available on Xlib's queue.
2. Xlibs calls that get information from the server require a reply before the program can continue, and therefore, the request buffer is sent and all the requests acted on before the information is returned.
3. Client flashed request buffer manually.

Using Xlib calls, the client can flush the connection in three ways:
1. by calling a routine that requires immediate reply (routine with =Query=, =Fetch=, or =Get= in it's name);
   - "I need some info; please act on these requests right away and then give me the info."
2. by calling certain event-reading routines when no matching event exists on Xlib's queue;
   - "I'm waiting for a certain event, so I'll check if you have already sent the event over to Xlib. If not, please act on these requests immediately, and then I'll be waiting for the event."
3. or by calling the routines =Xflush()= or =XSync()=
   - "I don't need any information from you now, but I need you to act on these requests immediately"

+ Events are also queued:
#+attr_html: :width 500px
[[./imgs/fig2_2.png]]

+ The fact that Xlib queues both input and output is very important to application programming and specially debugging.
  - It means that errors are not discovered by the server until the requests arrive at the server and are processed, which happens only after Xlib flushes its request buffer.
  - In other words, several Xlib routines may be called before an error caused by an earlier routine is reported.

** Resources [2.1.3]
X uses several techniques to reduce network traffic.
+ One major is to have the server maintain complex abstractions such as windows or fonts and have the client allocate an integer ID number for each one as a nickname.
+ Each of theses abstractions are called a /resourse./
  - A resource can be a window, pixmap, colormap, cursor, font or graphics context.

+ Whenever an operation is to be performed on a window (or any other resource), the ID of the window is used in one argument to the Xlib routine.
  - Instead of sending the entire struct!

** Properties and Atoms [2.1.4]
+ A /property/ is a packet of information associated with a window, made available to all the clients running under a server.
  - Used by clients to store information that other clients might nedd or want to know and to read that information when set by other clients.

+ Properties have a string name and a numerican identifier called an atom
  - An /atom/ is an ID that uniquely identifies a particular property.
  - The string names are typically all upper case, with words separated by underscores.
  - Atoms are used to refer to properties in routine call so that we don't have to send arbitrary-length property name string over the network
  - =XInternAtom(property_name_string)= is used by an application to get the atom for a property. After this, the application only uses the atom to refer to the property.

+ /Predifined atoms/ are defined when the server initializes.
  - =XInternAtom()= is not needed to get these atoms.
  - They are available as symbolic constants beginning with =XA_=.
  - They identify properties whose contents have a certain meaning known by convention to all clients.
  - They don't have any content untill client or wm sets them.

+ A group of related clients or an extension may define other properties and atoms that will have a meaning known to all the clients in the groups or using the extenion.

+ *Only atoms are used in client code; properties are the underlying data managed by the server.*

+ One of the most important uses of properties is to communicate information from apps to the wm and vice versa.

+ /Standard properties/ are a minimum set that an application should specify.

** The Window Manager [2.1.5]
+ Just another client written with Xlib but, by convention, it is given special responsabilities.
+ Mediates competing demands for the physical resources of a display, including screen space and colormap.
+ Most WMs decorate windows with a titlebar with buttons.
  - Does this by creating a window that fits behind the main window of each app.

+ Much of the communication between clients and WM occurs through properties (the rest are through events).
  - /Hints/ are properties that may not necessarily be honored by the WM.
  - Apps must be prepared for the WM to ignore, modify or honor the window manager hints.

Quite a few features of the Xlib exist only to give the WM the mechanism to enforce its authority.
+ /Substructure redirection/ is one such feature.
  - Substructure is the size, position, and overlapping order of children of a window.
  - Redirection refers to the request by apps to change the config of these windows being sent to the WM for approval instead of getting acted upon by the server.
  - Any app request to change the config of its top-level window will be canceled, and instead an event will be sent to the window manager indicating the arguments used in the reconfiguration request.
+ Substructure redirection has 2 significant implications for apps.
  1. An app cannot assume that the config it specifies for a window will actually be reflected int the window on the screen.
  2. A WM can intercept a mapping request, and it might take some time before the WM decides on a window config and maps the window itself.
     - The app must wait until it receives an event indicating that the window is visible before drawing to the window.

Most WMs have the ability to start and kill apps.
+ This is know as /session management/.
  - They can usually start only xterm and a few other basic clients..
  - A true session manager can be a separate client.

* What are X Windows? [2.2]
+ Windows currently in use are placed so that they are at least partially visible.
+ Scrollbars, titlebar, command buttons, and other features of the UI are actually separate windows that provide information to the user or allow for input providing convenient control.

** Window Characteristics [2.2.1]
+ A window always has a /parent/ window, assigned when the window is created.
  - The window is contained within the limits of its parent.
  - The window cannot display output in areas outside itself
  - The window cannot receive input from the keyboard or the pointer while the pointer is outside itself (unless a /grab/ or /keyboard focus/ is in effect).

+ The first window, called the root window, is created by the X server as it starts up and fills the entire screen.

+ Each window has its own coordinate system.
  - horizontal axis is /x/ and vertical axis is /y/.
  - the origin is upper-left corner (inside the border if there is one).
  - coordinates are integral and coincide with pixel centers.

+ Each window is given a unique ID when created.
  - All routines that affect a window use a window ID as argument.

+ A window has a /position/, a /width/ and /height/, and a /border width/.
  - By convention, window width and height do not include the border.
  - A window also has a /stacking order.
  - These 4 characteristics are called the /window configuration/ because the affect the layout of windows on a screen.
  - Window width, height and position are called the window /geometry/

+ A /window/ depth and /visual/ determine its color characteristics.
  - The depth is the number of bits available for each pixel to represent color (or gray scales)
  - The visual represent the way pixel values are translated to produce color and monochrome output on the monitor

+ A window has a class of either =InputOutput= or =InputOnly=.
  - =InputOutput= windows may receive input and may display output.
  - =InputOnly= windows are used for input only.

+ A window has a set of /attributes/. (Will be explained in detail later)
  - What color or pattern is used for the border and background of window?
  - How are partial window context relocated during resizing?
  - When are the contents of the window saved automatically as they become covered and then exposed?
  - Which event types are received, and which types are thrown away (not passed on to ancestor windows)?
  - Should this window be allowed to be displayed, moved, or resized withou notifying the window manager?
  - Which colormap is used to interpret pixel values drawn in this window?
  - Which cursor should be displayed when the pointer is in this window?

** Window Hierarchy [2.2.2]
+ The children of the root window are special, because they are the top-level windows of each app and they are managed by the WM.
+ The children of these windows are used to create app features like command buttons and scrollbars

These are the terms used to describe subsets of the window hierarchy:
+ _Parent_: The window used when creating a child window.
+ _Child_: A window created with another window as parent.
+ _Subwindow_: Synonymous with child.
+ _Siblings_: Windows created with the same parent.
+ _Descendants_: The children of a window, their children, and so on. Also called /inferiors/.
+ _Ancestors_: The parent of a window, their parent, and so on. Also called /superiors/.

** Window Staking Order [2.2.3]
+ There are various routines that raise, lower, or circulate windows relative to their siblings.
  - These do now affect the ancestors.

+ Child windows always stay in front of their parent.
  - When a window with children is moved in the stacking order, all its child windows move with it.

** Mapping and Visibility [2.2.4]
+ A new window does not immediately appear on the screen.
+ /Mapping/ marks a window as eligible for display.
  - If it is not obscured by siblings or siblings of ancestors, it may be visible, and only then can it be drawn.

+ =XMapWindow()= maps a window in its current position in the stacking order, while =XMapRaised()= places the window at the top of the stacking order of its siblings before mapping it.
  - These are equivalent for new windows because new windows always on top initially.

+ =XMapWindow()= and =XMapSubwindows()= to map.
+ =XUnmapWindow()= and =XUnmapSubwindows()= to unmap.

A number of factors can affect whether any window is visible:
1. The window must be mapped with =XMapWindow()= or related routines.
2. All of the window's ancestors must be mapped.
3. The window must not be obscured by visible sibling windows or siblings of ancestors.
   - If sibling windows are overlapping, whether or not a window is obscured depends on the stackig order. The stacking order can be manipulated with =XCirculateWindows()=, =XConfigureWindow()=, and =XRestackWindows()=.
4. The request buffer must be flushed by a routine that gets events, with a call to =XFlush()=, or by a function that requests information from the server.
5. The initial mapping of a top-level window is a special case, since the window's visibility may be delayed by the WM due to substructure redirection.
   - For complicated reasons, a client must wait for the =Expose= event before assuming that its window is visible and drawing into it.

+ Unmapping a window (with =XUnmapWindow()=) erases the window and all its descendants from the screen.

+ Window configuration and window attributes are maintained when a window is unmapped.

* Introduction to X Graphics [2.3]
** Pixels and Colors [2.3.1]
+ The state of the multiple bits assigned to each pixel is used as an index to a lookup table called a /colormap/.

+ The colormap contains an array of red, green and blue (RGB) triples.
  - Each RGB triple is called a /colorcell/. Each colorcell translates a pixel value into a specified set of RGB values.

+ In most cases, all clients share the single colormap by allocating only the number of colorcells they need and sharing as many as possible.
  - All bitmapped displays have at least one hardware colormap.
  - When clients have special requirements, X allows them to have private colorcells or to create virtual colomaps which are then swapped into the hardare colormap (if it is writable) when necessary.

+ Note that each window can potentially specify a different colormap.
  - This is the significance of the fact that the colormap is a window attribute.

** Pixels and Planes [2.3.2]
+ The number of bits per pixel is also referred to as the number of /planes/ in the graphics display.
+ X11 supports up to 32 planes.
+ The number of colors that can be /simultaneously/ displayed on the screen is =2^n=, where n is the number of planes in the display.
+ All graphics calculations are performed on the pixel values before they are translated to RGB.
  - The /source/ pixel values specified in a drawing request and the /old destination/ pixel values are combined according to a plane mask, clip mask, and logical funcion to arrive at the final /destination/ pixel values.

+ The macros =BlackPixel()= and =WhitePixel()= return pixel values that map to black and white usingg the default colormap of that screen.

** Pixmaps and Drawables [2.3.3]
+ Pixmaps are also valid destinations for most graphics requests.
+ A /pixmap/ is a block of off-screen memory in the server.
+ Windows and pixmaps are collectively known as /drawables/.

+ A pixmap is an array of pixel values.
  - It has a depth just like a window.
  - It doesn't have a position relative any other window or pixmap, and it does not have window attributes.
  - It becomes visible only when copied to a window.
+ =XCreatePixmap()= to create pixmap.

+ Routines specify either =Pixmap=, =Window= or =Drawable= in the name (for what they apply to).

+ To be copied to a window with =XCopyArea()=, a pixmap must have the same depth as the window it is to be copied to.
  - Once copied, the colormap associated with the window is used to translate the pixel values from the pixmap to visible colors.
  - After copying, aditional drawing to the pixmap does /not/ appear on the window.
+ A single plane of a pixmap of any depth can be copied into any window with =XCopyPlane()=.

+ A pixmap of depth 1 is know as a /bitmap/, though there is no separate type or resource called Bitmap.
  - A Bitmap is a 2-dimensional array of bits used for many purposes including cursor definitions, fonts, and templates for 2-color pictures.

** Drawing and the Graphics Context [2.3.4]
+ Drawing routines are called /graphics primitives/.

+ A server resource called /graphics context/ (GC) specifies the variables that are not specified (by other arguments to graphics primitives), such as the line width, colors, and fill patterns.
  - The ID of the GC is specified as an argument to graphics primitives.

+ The GC must be created by the client before any drawing is done.
  - The created GC is stored in the server, so that the info it contains does not have to be sent with every graphics primitive - only its ID is passed.

+ More than one GC can be created, and each can be set with different values.
  - Programs can switch between GCs and get different effects with the same graphics primitive.

** Tiles and Stipples [2.3.5]
+ A /tile/ is a pixmap with the same depth as the drawable it is used to pattern.
  - Typically 16x16 pixels but can be other sizes.

+ A /stipple/ is a pixmap of depth 1.
  - Used in conjunction with a foreground pixel value and somtiems a baackground pixel value to pattern an area in a way similar to a tile.

* More on Window Characteristics [2.4]
** Window Attributes [2.4.1]
The attributes controll the following window features:
+ Background: can be solid color, tiled pixmap, or transparent.
+ Border: solid color or tiled pixmap.
+ Bit Gravity: how partial window contents are preserved when a window is resized.
+ Window Gravity: provides hints about when a window's contents should be automatically sabed while the window is unmapped or obscured, which display panes should be saved, and what pixel value is to be used when restoring unsaved planes.
+ Saving Under: provides hints about whether or not th escreen area beneath a window should be saved while a window, such as pop-up menu, is in place to save obscured windows from having to redraw themselves when the pop up is removed.
+ Events: indicates which events should be received and which events should not be sent to ancestor windows.
+ Substructure Redirect Override: determines whether this window should be allowed to be mapped on the screen without intervention by the WM.
  - Usually done for menus and other windows that are frequently mapped and then almost immediately unmapped again.
+ Colormap: determines which virtual colormap should be used for this window.
+ Cursor: determines which cursor should be displayed when the pointer is in this window.

** Window Configuration [2.4.2]
+ Position, width and height, boder width, and stacking position.
+ A change in window configuration must be done in cooperation with the WM.

** Class: InputOutput and InputOnly Windows. [2.4.3]
+ =InputOnly= cannot be used as a drawable.
  - They have a limited set of window attributes,
  - no border,
  - transparent background,
  - and cannot have =InputOutput= children.
  - They are rarely used.

+ Window class is assigned at creation and cannot be changed.

** Depth and Visual [2.4.4]
+ Assigned at creation and cannot be changed.

+ /Depth/ is the number of planes that are to be used to represent gray scales or color within a window.
  - Depth is also the number of bits per pixel.
  - The maximum depth for an =InputOutput= window is the number of planes supported by the screen with which it is associated.
  - The depth of an =InputOnly= window is always 0.

+ The visual accounts for the differences between various types of display hardware in determining the way pixel values are translated into visible colors within a particular window.
  - A screen may support one or multiple visuals.
  - =XVisualInfo= structure contains all the information about a particular visual.

** Icons [2.4.5]
+ An /icon/ is a small marker window that indicates that a larger "main" window exists and is available but not currently mapped on the screen.

+ Most WMs allow a user to /iconify/ an app to get it out of the way without destroying it.

+ Managed and created by the WM.

** Special Characteristics of the Root Window [2.4.6]
+ Created when X server is initialized.
+ =InputOutput=.
+ Always mapped.
+ Size can't change.
+ 0 width border.

* Introduction to Events [2.5]
** What is an Event? [2.5.1]
+ It's a packet of information that is generated by the serve when certain actions occur and is queued for later use by the client.
  - They are read and processed at any time or order but usually they are in the order in which they occurred.

+ A certain group of events is used for input and to control a user interface.

+ A second group are for reporting side effects of window operations.

+ A third group are to allow various clients to communicate with each other and with the WM.

** Selection and Propagation of Events [2.5.2]
+ A client must select the event type that it wants the server to send for each window.
  - Selection is made by =XSelectInput()=, which sets the =event_mask= window attribute, by setting that attribute with =XChangeWindowAttributes()=, or when calling =XCreateWindow()=

+ The event generated propagates upward through the window hierarchy until the event type is found in the =event_mask= or =do_not_propagate_mask= attributes of the window.
  - If the event is found in an =event_mask= first, then the event is sent as if it occurred in that window.
  - If it is found in a =do_not_propagate_mask= first, then it is never sent.
  - The ID of the window that finally received the event (if any) is put in the =window= member of the event structure.

+ Events other than keyboard or pointer type do not propagate.
  - they occur in the window in which they were selected when the appropriate action occurs.

+ For most type of events, a copy of an event can be sent to more than one client if each client has selected that event type on that window.
  - The client that wants to get an event from a window that it did not creat simply needs to find out the ID of the window and then select the desired event types with =XSelectInput()= on that window.
  - A duplicate event is sent to each window and propagate independently up.
  - This is rarely done.

** The Event Queue [2.5.3]
+ Each client has its own event queue which receives the selected events in the order they are sent by the server.

+ The client then can remove each event at any time and process it according to its type and the other information in each event structure.

+ The client can also read events on the queue without removing them, remove one and then put it back, or clear the queue.

+ Events can also be created by a program and sent to the WM or other programs.

** An Event Structure [2.5.4]
+ =Expose= is one of the most important event types.
  - Generated when an area of a window becomes visible on the screen and indicates that the client must redraw the area.
#+begin_src c
typedef struct {
    int type;             // is the symbolic constant Expose
    unsigned long serial; // # of last request processed by server
    Bool send_event;      // true if this came from a SendEvent
    Display *display;     // display the event was read from
    Window window;        // to which event is propagated
    int x, y;
    int width, height;
    int count;            // if nonzero, more expose events follow
} XExposeEvent;
#+end_src

** The Event Loop [2.5.5]
+ Every program contains an event loop in which each event is received and processed.
  - Normally, with a =while= and an event-getting routine at the beginning followed by a =switch=

+ When a window is first mapped, the first function of the program must be to read the exposure event that is generated by mapping the window.

* How to program with Xlib [2.6]
** Designing an X Application [2.6.1]
From the user's standpoint, almost any app under any window system will do the obvious things:
+ create a window on the screen of an appropriate size,
+ determine a position for some text and/or graphics within the window,
+ draw into the window, and accept keyboard and/or pointer input,
+ changing the screen accordingly.

*** Designing Requirements [2.6.1.1]
Following are the things that must be done for the app to operate properly under X but that the average user might not notice or know about.

+ X allow workstations to be connected in a network which any host or node may run X programs and display them on any other node, given permission.
  - The program must be able to accept the user's specification of which display to use.
  - This is built in and requires virtually no programming.

+ The app must be responsible in its use of the limited resources of the display, chiefly screen space and colormaps.
  - *The client in charge of managing these limited resources is the WM*.
  - There are certain requirements for communication between each app and the WM to ensure that competing needs can be fairly arbitrated and to help make sure that the user sees a consistent user interface.

+ Other clients may be moved over you client and then moved away, requiring your client to redraw its window or windows.
  - X can't maintain the contents of an unlimited number of overlapping windows, and it is inefficient for it to try to maintain even a few.
  - Your client will be told when redrawing is necessary and in what areas.
  - This encourages programming in a way that records the current "state" of each window so that it can be redrawn.

+ The user may resize your app, so it should be capable of recalculating the dimensions and placement of subwindows and graphics to fit the given window.

*** The User Interface [2.6.1.2]
+ The first step in designing an app will be to determine what its features will be. Determining how user will invoke those features is probably the next step.
  - This means designing the user interface.

+ Because X is purposely designed to be "policy free", you have to write all the parts of the UI yourself, unless you use a toolkit.

+ The key elements that interact in the design of a user interface are the hierarchy of windows and the selection and processing of events, chiefly pointer and keyboard evetns.
  - For every user action, theme must be a path through the event-handling code that yields some sort of response to the user.
  - In the main event loop, each case statement for an event type must then have another switch depending on the window which received the event.

+ It is recommended (before the code) to draw out the hierarchy of windows and the types of events selected by each one and then drawing in the events that will be propagated to ancestor windows.

** Writting an X Application [2.6.2]
*** Resources and User Customizability [2.6.2.1]
+ An app should allow the user to specify the colors of all windows, the font to use, the display and screen to use, the initial size and position of the application, and a large number of other standard and app specific options.

+ A user specifies optios through /resources/. (different from /server resource/) (key/pair values)
  - They place a desired options in a file using a particular format, and runs the X app =xrdb= specifying this file.
  - xrdb places a property on the root window whose value is the contents of this file.

*** Naming Conventions [2.6.2.3]
The major conventions are:
+ All Xlib functions begin with an "X".
  - Compounds are constructed by capitalizing the first letter of each word.
+ The names of most user-visible data structures and structure types begin with an X
  - except: =Depth=, =Display=, =GC=, =Screen=, =ScreenFormat=, =Visual=
+ The names of all members of data structures use lower case.
  - Compounds are constructed with "_"
+ The names of macros do not begin with an "X".
  - First letter of each word is capitalized.
+ The names of symbolic constants in X header files use mixed case, with the first letter of each word capitalized.
  - User symbols are uppercase.
  - Reserved variables use lowercase.

+ We must choose constants an routine names that will not be confused with standard Xlib funcs, macros, or constants.
  - User func name should have the first letter lower case to and not "X".
  - User constants should be all upper case.

*** Using Structures, Symbols, and Masks [2.6.2.4]
We will describe how structs and constants are typically used so that the idea will be familiar when we see examples.

+ Pointers to structures are the major way of specifying data to and returning data from Xlib routines.
  - If func returns more than a struct, one of all the structs will be arguments.
  - In some cases a func can be used to pass *and* return.

+ When setting the characteristics of a server resource, such as a set of window attributes, a GC, the cells in a colormap, or a hardware characteristic (such as key click), both a structure and mask are specified as arguments
  - The _mask_ specifies which values in the specific structure, and a special _constant_ is defined in the Xlib header files to represent that member when constructing the mask.
  - Each of the mask constants has one bit set.
  - The mask arg is made by combining any number of the mask constants with bitwise OR.

+ The other major use of defined constants in Xlib (other than masks) is as values for structure members themselves.
  - They indicate which of a number of alternatives is true.

+ Defined constants are also used for predefined atoms (int id of a property).

*** Performancec Optimizing [2.6.2.5]
+ Whenever possible, use Xlib funcs that do not require protocol replies (especially in the event loop).
+ In general, keep the feedback loop between the user's actions and the program's response as short as possible.

** Debuggin an X Application [2.6.3]
+ A good debugger such as =dbx= avoids the need for constant =printf=.
+ =xwininfo= is good for displaying information about a window.
+ =xprop= displays the name, type and value of each prop set on a window.
  - Good for debugging apps that set or read props.

+ If your app generates protocol errors during debugging, it is easier to locate the error if you turn off Xlib's request buffering.
  - This is done with the =XSynchronize()= call places immediately after the call to connect with the server (=XOpenDisplay()=).

+ One of the most commmon places to have a difficulty debugging is in event handing.
  - It is recommended that all programs under dev contain =pritf= statements at the beggining of each branch of their event handling, so that the programmer can watch the sequence of events in one window and the visible performance of the app in another.
  - Can be placed with the check of a "debug" bool that can be defined on the compiling command line.

Here are some miscellaneous tests you should put in your app:
+ Try all combinations of raising and lowering different windows to test the app's response to exposure. Does it redraw unnecessarily?
+ Try all combinations of pressing and releasing different pointer buttons to see if anything breaks.
+ Try operating the program in a busy network environment.
+ Try the app on a variety of different servers. Does it work on both color and monochrome systems?
+ Try running the app on machines with different architectures and bit and byte orders.
+ What happens when you type function keys or the other unique keys on a particular keyboard?
+ Is it possible to crash the app by specifying the wrong set of resources or cmd line args?

*** Errors [2.6.3.1]
There are 3 levels of error handling in programs using Xlib.
+ The 1st level we implement ourselves by monitoring the return status of the routines that *create sever resources*.
  - ex: A client should always check to see whether it was successfully connected to the display server with =XOpenDisplay()= before proceeding. If this connection did not succeed, the client should print a message to stderr indicating what happened and which server it attempted to connect to.
+ The 2nd level, protocol errors, is usually caused by a programming error.
  - ex: When routine arguments do not conform to accepted ranges or when IDs do not match existing resources, etc. Theses types are sent to =XErrorHandler=. Fatal errors such as a broken connection with the server, are unrecoverable conditions and invoke the =XIOErrorHandler. By default, both handlers display a message and then exit
+ The 3rd level is usually caused by system error such as a crash of the machine running the server or network failure.

+ User-defined error-handling routines will be called from the error handlers if you pass procedure names to =XSetIOErrorHandler()= or =XSetErrorHandler()=. If none is passed, the respective default error handler will be reinstalled.
  - It is recommended that you use =XGetErrorText()= or =XGetErrorDatabaseText()= to get the string describing an error code, so that the codes of extensions can be handled properly.

+ Only =XErrorHandler= (or the one you define) receives error events. These events can't be selected or received by windows.

*** The =XErrorEvent= Structure [2.6.3.2]
#+begin_src c
typedef struct _XErrorEvent {
    int type;
    Display *display;           /* Display the event was read from */
    XID resourceid;             /* Resource ID */
    unsigned long serial;       /* Serial number of failed request */
    unsigned char error_code;   /* Error code of failed request */
    unsigned char request_code; /* Major opcode of failed request */
    unsigned char minor_code;   /* Minor opcode of failed request */
}
#+end_src

+ _serial_ is the number of requests sent over the network connection since it was opened, starting from 1.
+ _request_code_ is a protocol representation of the name of the protocol request that failed.
+ _error_code_ is one of the items in /Error messages and protocol/ (vol 2).
+ _minor_code_ is a zero unless the request is part of an extension. If it is, the minor_code indicates which request in the extension that caused the error.
+ _resource_id_ indicates of the server resources (window, colormap, etc.) that was associated with the request that caused the error.

*** The Synchronizing Errors [2.6.3.3]
Since error events are not displayed precisely when they occur, it is often informative to loop up the protocol request as well as the error code to determine which function the error occured in.
+ *You can't rely on the debuffer to indicate where the error occurred because of Xlib's request buffering and other delays.*
+ Use =XSynchronize()= to make sure that protocol errors are displayed as soon as they occur. When =XSynchronize()= is invoked, the performance of graphics will be *drastically reduces*. (same as setting the global var =_Xdebug= to any nonzero value when running a program under a debugger)

*** Software interrupts [2.6.3.4]
+ *Xlib does not handle software interrupts.*
+ Therefore if you recusively call back into Xlib from a signal handler, the program will *hang or crash*.
  - This is mostly an issue on systems that feature threads or multiple processors.
  - The correct way to handle signals is to never make Xlib calls from signal handlers.
