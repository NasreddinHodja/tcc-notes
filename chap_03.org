#+title: Chap. 3: Basic Window Program

Every Xlib program has a similar structure. This chap shows a simple program that puts up windows and handles events in that window.

The program will perform these operations:
+ Connect the client to an X server with =XOpenDisplay()=, and exit gracefully if the connection could not be made.
+ Get information about the physical screen, and use it to calculate the desired size of the window.
+ Create a window with =XCreateSimpleWindow()=.
+ Set standard properties for the window manager.
+ Select the types of events it needs to receive.
+ Load the font to be used for printing text.
+ Create a graphics context to control the action of drawing requests.
+ Display the window with =XMapWindow()=.
+ Loop for events.
+ Respond to the =Expose= event resulting from mapping the window (and any other =Expose= event that might come along later) by calling routines to draw text and graphics. It the window is too small to perform its intended function, it will display an appropriate message.
+ Receive =ConfigureNotify= evetns, indicating that the window has been resized by the window manager. The new window size if provided in the event structure.
+ Keep handling events untill a =KeyPress= or =ButtonPress= event arrives, then close the display connection e exits.

The program does not perform the following operations, which are required of a robust X client:
+ Allow the user to specify command line options and read the resource database.
+ Handle colors.

* Running the Program [3.1]
+ The program just displays a window with some text and graphics drawn into it.

* The Main of basicwin [3.2]
+ The main does everything described at the start of this chapter except create the GC, load the font, and draw the text and graphics.
  - These are done in the =draw_graphics=, =draw_text=, =get_GC= and =load_font= routines.

** Include Files and Declarations [3.2.1]
#+name: Example 3-1. basicwin -- include files and declarations
#+begin_src c
/* Xlib include files */
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xos.h>
#include <X11/Xatom.h>
/* Standard C include file */
#include <stdio.h>
/* Bitmap data for icon */
#include "bitmaps/icon_bitmap"
#define BITMAPDEPTH 1
/* Values for window_size in main −− is window big enough to be
 ,* useful? */
#define TOO_SMALL 0
#define BIG_ENOUGH 1
/* Display and screen_num are used as arguments to nearly every
 * Xlib routine, so it simplifies routine calls to declare them
 * global; if there were additional source files, these variables
 * would be declared "extern" in them */
Display *display;
int screen_num;
/* Name this program was invoked by; this is global because
 * it is used in several places in application routines, not
 * just in main */
static char *progname;
void main(argc, argv)
int argc;
char **argv;
{
   Window win;
   unsigned int width, height;      /* Window size */
   int x = 0, y = 0;                /* Window position */
   unsigned int border_width = 4;   /* Border four pixels wide */
   unsigned int display_width, display_height;
   char *window_name = "Basic Window Program";
   char *icon_name = "basicwin";
   Pixmap icon_pixmap;
   XSizeHints *size_hints;          /* Preferred sizes for window man */
   XEvent report;                   /* Structure for event information */
   GC gc;                           /* ID of graphics context */
   XFontStruct *font_info;          /* Structure containing
                                     * font information */
   char *display_name = NULL;       /* Server to connect to */
#+end_src

+ =<X11/Xlib.h>=, =<X11/Xutil.h>= and =<X11/Xos.h>= are needed in virtually all Xlib programs.
  - =<X11/Xlib.h>= contains structure types used in Xlib functions.
    - Includes =<X11/X.h>= which sets up many defined constants.
  - =<X11/Xutil.h>= contains more structures and defined constants for certain groups of Xlib funcs.
  - =<X11/Xos.h>= attempts to make programs as portable as possible by including files depending on the OS for which the program is being compiled.
    - Not absolutely necessary, but useful.

These are the types that appear: =Window=, =Display=, =Pixmap=, =XSizeHints=, =XEvent= are all defined in =<X11/Xlib.h>=.
+ =Window=: Unique ID that is returned by =XCreateWindow()= or =XCreateSimpleWindow()= and is thereafter used by the program to refer to the created resource.
+ =Display=: Large structure that contains info about the server and its screens. It is filled only after this program connects to a server by calling =XOpenDisplay()=.
+ =Pixmap=: ID but for pixmap resource. In this case, it's a picture to display in the icon for the window.
+ =XSizeHints=: Structure that is used to provide the window manager with information about the preferred sizes and size increments for the top-level window of the application.
+ =XEvent=: Union that stores information about an event. It can be interpreted as one of many individual structure types depending on the type of event.

** Connection to a Server [3.2.2]
#+name: Example 3-2. basicwin -- connecting to the server
#+begin_src c
char *display_name = NULL;
Display *display;
int screen_num;
Screen *screen_ptr;
   .
   .
   .
progname = argv[0];
/* Connect to X server */
if ( (display=XOpenDisplay(display_name)) == NULL )
{
   (void) fprintf( stderr, "%s: cannot connect to X server %s\n",
               progname, XDisplayName(display_name));
   exit( −1 );
}
screen_num = DefaultScreen(display);
screen_ptr = DefaultScreenOfDisplay(display);
#+end_src

+ =display_name= arg specifies which server to connect to.
  - When =NULL=, =XOpenDisplay()= will connect to the server specified in the UNIX env var =DISPLAY=.
  - The format is =host:server.screen=, host is name of machine running the server, server is the server number on that machine, and screen is the screen number on that server.
  - server number is ALWAYS 0 on a single-user workstation and may be nonzero only if a single host has a separate keyboard, printer, and display for more than one user, all connected by wires to the central host.
  - The =screen= part is optional and only specifies which screen is retured by the =DefaultScreen()= macro.

+ =XOpenDisplay()= returns a pointer to a structure of type =Display=.
  - If the connection is successfull, the structure will be filled with information about the server and each of its screens.
  - If the connection fails, it returns =NULL=.
+ Why fail to connec to a server?
  - =display_name= var or =DISPLAY= env var does not specify a valid server.
  - The server and client use different versions of the X protocol. All releases of X Version 11, however, are compatible.
  - The host you are running the client on is not on the *host access list* of the server you are trying to display on.

+ After connecting, we can begin to set up vars for use in the rest of the program.
  - =screen_num= is the return value of the =DefaultScreen()= macro. Can be set to any integer between 0 and =ScreenCount(display) - 1=.

** Display Macros [3.2.3]
We just described them.
+ They all get info from the =Display= structure returned by =XOpenDisplay()

** Getting Window Information [3.2.4]
Most clients need to know the size of the screen.
+ You can access the =Display= structure to get information abou the root window.
  - More efficient, gets information from the local structure. Uses macros to access the information.
  - *Only to get information on the root window.*
  - =DisplayWidth()= and =DisplayHeight()= return the screen dimmentions in pixels.
  - =DisplayWidthMM()= and =DisplayHeightMM()= return the screen dimmentions in millimeters.
  - *!!! mm / pixel indicates the spacing between pixels and is important to consider when drawing. !!!*

+ You can use the =XGetGeometry()= or =XGetWindowAttributes()= to get the root window's dimentions.
  - =XGetWindowAttributes()= calls =XGetGeometry()= itself and also gets way more information.
  - Get the information from the server.

#+name: Example 3-3. Code fragment for getting display dimentions -- using macros
#+begin_src c
Display *display;
int screen_num;
unsigned int display_width, display_height;
   .
   .
screen_num = DefaultScreen(dislay);
   .
   .
/* Display size is a member of display structure */
display_width = DisplayWidth(display, screen_num);
display_height = DisplayHeight(display, screen_num);
#+end_src

#+name: Example 3-4. Another way to get window size -- using XGetGeometry()
#+begin_src c
Display *display;
int screen_num;
Window root;
int x, y;
unsigned int width, height;
unsigned int border_width;
unsigned int depth;
   .
   .
/* Open display */
   .
   .
/* Geometry information about root window */
display_width = DisplayWidth(display, screen_num);
display_height = DisplayHeight(display, screen_num);

if (XGetGeometry(display,
                 RootWindow(display, screen_num),
                 &root,
                 &x, &y, &width, &height, &border_width, &depth) == False)
{
    fprintf(stderr, "%s: can't get root window geometry\n",
            progname);
    exit(-1);
}
display_width = width;
display_height = height;
#+end_src

#+name: Example 3-5. A third way to get window size -- using XGetWindowAttributes()
#+begin_src c
Display *display;
int screen_num;
XWindowAttributes windowattr; /* (This declaration at top) */
   .
   .
/* Open display */
screen_num = DefaultScreen(display);
   .
   .
/* Geometry information about root window */
display_width = DisplayWidth(display, screen_num);
display_height = DisplayHeight(display, screen_num);

if (XGetWindowAttributes(display, RootWindow(display, screen_num),
                         &windowattr) == 0)
{
    fprintf(stderr, "%s: can't get root window geometry\n",
            progname);
    exit(-1);
}
display_width = windowattr.width;
display_height = windowattr.height;
#+end_src

** Creating Windows [3.2.5]
The next step is to create and place windows.

+ A window's position relative to its parent is determined as the window is created, since these coordinates are specified as arguments to the routine that creates the window.

=basicwin= application has only one window.

+ Creating the first window of an application is a special case, because that window is a child of the root window, and therefore, is subject to management by the WM.
  - An application can suggest a position for this window, but *it is very likely to be ignored*
  - Most WMs allow the user to position the window as it appears on the screen.
  - Most simple applications create the first window with position (0,0).

#+name: Example 3-6. basicwin -- creating a window
#+begin_src c
Window win;
int border_width = 4;           /* in pixels */
unsigned int width, height;
int x, y;
   .
   .
/* Open display, determine screen dimentions */
screen_num = DefaultScreen(display);
   .
/* Note that in a real application, x and y would default to 0 but
   would be settable from the command ine or resource database */
x = y = 0;

/* Size window with enough room for text */
width = display_width / 3, height = display_height / 4;
/* Create opaque window */
win = XCreateSimpleWindow(
    display, RootWindow(display, screen_num),
    x, y, width, height, border_width,
    BlackPixel(display, screen_num),
    WhitePixel(display, screen_num)
);
#+end_src

+ =RootWindow()= macro: returns ID of root window in a particular screen.
  - Each screen has its own root window.
  - To create the first of your application's windows on a particular screen, you use the root window on that screen as the parent.

+ =XCreateSimpleWindow()= is used when we want the window to inherit the parents attributes that are not specified as arguments.
+ =XCreateWindow()= is used when we want to specify any or all attributes instead of inheriting them from parent.

** Color Strategy [3.2.6]
+ Applications do not choose pixel colors, they choose colors and are returned pixel values by a routine they call that allocates colors or they get pixel values from display macros =BackPixel()= and =WhitePixel()=.

+ We use the the =WhitePixel()= macro to specify the background pixel value and set the foreground in the GC to be the contrasting value returned by =BackPixel()=.
  - The border pixel value is also set to =BlackPixel()=.
  - Background and border pixel values are set with the last two arguments of =XCreateSimpleWindow()=.
  - Foreground pixel value is set in the =get_GC= routine in the manner described in Section 5.1.

+ Adding color is described in Chap 7.

** Preparing an Icon Pixmap [3.2.7]
+ An app should create an icon design for itself, so that if a window manager is running and the user iconifies the application, the icon will be recognizable as belonging to the particular application.

The program should take 2 steps in creating the pixmap:
1. it should find out what sizes of icons are acceptable;
2. create a pixmap of appropriate size.
*This step can be ignored because currently WMs don't usually specify icon sizes. When they do, applications should use =XGetIconSizes()= to determine which WM was in operation and have a icon bitmat for each one.*

#+name: Example 3-7. basicwin -- creating an icon pixmap
#+begin_src c
#include "bitmaps/icon_bitmap"
void main(argc, argv)
int argc;
char **argv;
{
   /* Other declarations */
     .
     .
     .
   Pixmap icon_pixmap;
   /* Open display, create window, etc. */
   /* Might someday want to use XGetIconSizes to get the icon
    * sizes specified by the window manager in order to determine
    * which of several icon bitmap files to use, but only when
    * some standard window managers set these */
   /* Create pixmap of depth 1 (bitmap) for icon */
   icon_pixmap = XCreateBitmapFromData(display, win,
         icon_bitmap_bits, icon_bitmap_width,
         icon_bitmap_height);
     .
     .
     .
#+end_src

+ Icon design can be created using X app =bitmap=.
  - =$ bitmap icon_bitmap 40x40=

#+name: Example 3-8. Format of bitmap files
#+begin_src c
#define icon_bitmap_width 20
#define icon_bitmap_height 20
static char icon_bitmap_bits[] = {
   0x60, 0x00, 0x01, 0xb0, 0x00, 0x07, 0x0c, 0x03, 0x00, 0x04, 0x04, 0x00,
   0xc2, 0x18, 0x00, 0x03, 0x30, 0x00, 0x01, 0x60, 0x00, 0xf1, 0xdf, 0x00,
   0xc1, 0xf0, 0x01, 0x82, 0x01, 0x00, 0x02, 0x03, 0x00, 0x02, 0x0c, 0x00,
   0x02, 0x38, 0x00, 0x04, 0x60, 0x00, 0x04, 0xe0, 0x00, 0x04, 0x38, 0x00,
   0x84, 0x06, 0x00, 0x14, 0x14, 0x00, 0x0c, 0x34, 0x00, 0x00, 0x00, 0x00};
#+end_src

+ This format is used in =XCreateBitmapFromData()=, =XWriteBitmapFile()=, =XReadBitmapFile()=
  - An app can also read from a file instead of =#define=.

** Communicating with the Window Manager [3.2.8]
+ Before mapping the window, an app must set the standard properties to tell the WM at least a few essential things about the app.
+ The standard properties are part of the convention for communication between each app and the WM.
  - Associated with the top level window of an app.

+ The routine designed to set all the most important properties for a normal app is =XSetWMProperties()=.

+ The doc describing the standard for communication between the app and the WM is called the /Inter-Client Communication Conventions Manual/; (reprinted in Appendix L)

+ The minimum set of properties that an app must set are:
  - Window name
  - Icon name
  - Icon pixmap
  - Command name and arguments (the command line)
  - Number of arguments
  - Preferred window sizes
  - Keyboard focus model

#+name: Example 3-9. basicwin -- setting standard properties
#+begin_src c
void main(argc, argv)
int argc;
char **argv;
{
   XWMHints *wm_hints;
   XClassHint *class_hints;
   XTextProperty windowName, iconName;
      .
      .
      .
   /* To be displayed in window manager’s titlebar of window */
   char *window_name = "Basic Window Program";
   /* To be displayed in icon */
   char *icon_name = "basicwin";
   Pixmap icon_pixmap;
   XSizeHints *size_hints; /* Structure containing preferred sizes */
   if (!(size_hints = XAllocSizeHints())) {
      fprintf(stderr, "%s: failure allocating memory, progname);
      exit(0);
   }
   if (!(wm_hints = XAllocWMHints())) {
      fprintf(stderr, "%s: failure allocating memory, progname);
      exit(0);
   }
   if (!(class_hints = XAllocClassHint())) {
      fprintf(stderr, "%s: failure allocating memory, progname);
      exit(0);
   }
   /* Open display, create window, create icon pixmap */
      .
      .
      .
   /* Before mapping, set size hints for window manager */
   /* Note that in a real application, if size or position were
    ,* set by the user, the flags would be USPosition and USSize,
    ,* and these would override the window
    ,* manager’s preferences for this window.  */
   /* x, y, width, and height hints are taken from the
    ,* actual settings of the window when mapped; note that
    ,* PPosition and PSize must be specified anyway */
   size_hints−>flags = PPosition | PSize | PMinSize;
   size_hints−>min_width = 300;
   size_hints−>min_height = 200;
   /* These calls store window_name and icon_name into
    ,* XTextProperty structures and set their other fields
    ,* properly */
   if (XStringListToTextProperty(&window_name, 1, &windowName) == 0) {
       (void) fprintf( stderr, "%s: structure allocation for \
            windowName failed.\n", progname);
      exit(−1);
   }
   if (XStringListToTextProperty(&icon_name, 1, &iconName) == 0) {
      (void) fprintf( stderr, "%s: structure allocation for \
            iconName failed.\n", progname);
      exit(−1);
   }
   /* Whether application should be  normal or iconified
    * when first mapped */
   wm_hints−>initial_state = NormalState;
   /* Does application need keyboard input? */
   wm_hints−>input = True;
   wm_hints−>icon_pixmap = icon_pixmap;
   wm_hints−>flags = StateHint | IconPixmapHint | InputHint;
   /* These are used by the window manager to get information
    * about this application from the resource database */
   class_hints−>res_name = progname;
   class_hints−>res_class = "Basicwin";
   XSetWMProperties(display, win, &windowName, &iconName,
         argv, argc, size_hints, wm_hints,
         class_hints);
#+end_src

+ Remember that these properties are only *hints*.
  - Therefore an application should not depend on anything having been done with the info provided in the standard properties.

+ The convention within WMs is to use the window name as the icon name; if the window name is not specified either, then they will use the first element of the command line.

+ The UNIX shell command name and args are passed into /main/ in the standard fashion from the command line. These can be used directly as arguments in the call to set the standard properties.

+ The window size hits property is a structure that specifies the sizes, positions, and aspec ratis preferred by the user or the program for this app.

#+name: Example 3-10. The XSizeHints structure
#+begin_src c
typedef struct {
        long flags;                    /* Marks defined fields
                                        * in this structure */
        int x, y;                      /* Obsolete as of R4 */
        int width, height;             /* Obsolete as of R4 */
        int min_width, min_height;
        int max_width, max_height;
        int width_inc, height_inc;
        struct {
                int x;                 /* Numerator */
                int y;                 /* Denominator */
        } min_aspect, max_aspect;
        int base_width, base_height;   /* New in R4 */
        int win_gravity;                /* New in R4 */
} XSizeHints;
#+end_src

+ Applications can be written to let the user specify the position and size fo the top-level window through command line arguments or the resource database.
  - To tell the window manager that the user, not the app, supplied these values, the app would set the =flags= field to =USSize | USPosition= instead of =PSize | PPosition=.

+ In Example 3-9, the symbols used to set =flags= are =PSize= and =PMinSize=.
  - These indicate that the program is specifying its desired size and its minimum useful size.

+ =x, y, width, height= are simply the desired position and size for the window.

+ The rest of the size hints tells the WM information about how to resize windows.
  - =min_height= and =min_width= should be set to minimum dimensions (in pixels) required so that the app can still function normally.
  - Many WMs will not allow the user to resize windows beyond these limits.

** Selecting Desired Event Types [3.2.9]
+ Next step is to select the event types that the app will require.
+ Our app must receive events for 3 reasons:
  - redraw itself in case of exposure;
  - recalculate its contents when it is resized;
  - and to receive a button or key press indicating that the used is finished with the app.
#+name: Example 3-11. basicwin -- selecting desired event types
#+begin_src c
/* Select event types wanted */
XSelectInput(display, win, ExposureMask | KeyPressMask |
   ButtonPressMask | StructureNotifyMask);
#+end_src

+ =StructureNofityMask= selects a number of event types, specifically =CirculateNotify=, =ConfigureNotify=, =DestroyNotify=, =GravityNotify=, =MapNotify=, =ReparentNotify=, =UnmapNotify=.
  - =ConfigureNotify= informs the app of its window's new size when it has been resized.

+ =XSelectInput()= sets the =event_mask= attr of the window.

+ =XCreateWindow()= allows you to select events at the same time by specifying the =event_mask= attribute.
  - More efficient than calling =XSelectInput()= separately.

** Creating Server Resources [3.2.10]
+ Next step is to create any other server resources that are needed.
  - They should be created only once and the ID kept rather than creating and deleting them in frequently called subroutines.

+ In our app, we still need to load a font for the text and to create a GC to draw both text and graphics.
  - These operations are done in the routines =load_font()= and =get_GC()=. (called just before mapping the window).(will be described in Chap 5)

** Window Mapping [3.2.11]
+ Next step is to display the window.
#+name: Example 3-12. basicwin -- mapping the window
#+begin_src c
/* Display window */
XMapWindow(display, win);
#+end_src

+ (Remeber Chap 2, "X Concepts") In order for window to be visible, it must meet 5 conditions:
  1. The window must be mapped with =XMapWindow()= or related routines.
  2. All its ancestors must be mapped. Always satisfied for the children of the root window.
  3. The window must not be obscured by visible sibling windows or their ancestors -- this depends on the stacking order.
     - When first mapped, a window appears on top of its siblings.
  4. The request buffer must be flushed.
  5. The initial mapping of the top-level window is a special case, since the window's visibility may  be delayed by the WM.
     - For complicated reasons, an app must wait for the first =Expose= event before assuming that its window is visible and drawing to it.

** Flushing the Output Buffer [3.2.12]
+ =XMapWindow()= causes an X protocol request that instructs the server to display the window on the screen.
  - This request (like all) is queued until an event-reading routine such as =XNextEvent()=, a routine that queries the server (most routine names contain =Fetch=, =Get=, =Query=), or a routine such as =XFlush()= or =XSync= is called.
  - *The server operates more efficiently over the network when X protocol requeests are sent in groups.*

+ *The =XNextEvent()= call performs the flushing frequently enough in apps that take user input.*
  - The routines that query the server should be called as infrequently as possible because they reduce performance over the network.
  - The =XFlush()= command instructs the server to process all queued output requests right away.
  - =XFlush()= is generally necessary only when an app needs to draw periodically even without user input.

** Setting Up an Event-gathering Loop [3.2.13]
+ X programs are event-driven, which means that after stting up all the server resources and window manager hints, the program performs actions only in response to events.
+ The event-gathering loop is the standard way to respond to events, performing the appropriate action depending on the type of the event and the information contained in the event structure.
+ It is normally a closed loop, in which one of the event types with certain contents defined by the app indicates that the user wants to exit.
  - The choice of which events are received by the app was made earlier when the app selected input or set the =event_mask= attribute.
  - The event loop must make sure to properly handle every event type selected.
  - *One of the most common debugging problems is for there to be a difference between the events handled and those selected.*

#+name: Example 3-13. basicwin -- processing events
#+begin_src c
  .
/* Get events, use first Expose to display text and graphics
 ,* ConfigureNotify to indicate a resize (maybe even before
 ,* first Expose); ButtonPress or KeyPress to exit */
while (1)  {
   XNextEvent(display, &report);
   switch  (report.type) {
   case Expose:
      /* Unless this is the last contiguous expose,
       ,* don’t draw the window */
      if (report.xexpose.count != 0)
         break;
      /* If window too small to use */
      if (window_size == TOO_SMALL)
         TooSmall(win, gc, font_info);
      else {
         /* Place text in window */
         place_text(win, gc, font_info, width, height);
         /* Place graphics in window */
         place_graphics(win, gc, width, height);
      }
      break;
   case ConfigureNotify:
      /* Window has been resized; change width and height
       ,* to send to place_text and place_graphics in
       ,* next Expose */
      width = report.xconfigure.width;
      height = report.xconfigure.height;
      if ((width < size_hints−>min_width) ||
            (height < size_hints−>min_height))
         window_size = TOO_SMALL;
         else
         window_size = BIG_ENOUGH;
      break;
   case ButtonPress:
      /* Trickle down into KeyPress (no break) */
   case KeyPress:
      XUnloadFont(display, font_info−>fid);
      XFreeGC(display, gc);
      XCloseDisplay(display);
      exit(1);
   default:
      /* All events selected by StructureNotifyMask
       * except ConfigureNotify are thrown away here,
       * since nothing is done with them */
      break;
   } /* End switch */
} /* End while */
#+end_src
+ A =ConfigureNotify= event is always followed by one or more =Expose= events.

*** Repainting the Window [3.2.13.1]
+ =Expose= events occur when a window becomes visible on the screen, after being obscured or unmapped.
  - They occur because the X Window System does not normally save the contents or regions of windows obscured by other windows or not mapped.
  - The contents of windows need to be redrawn when they are exposed.

+ The code for =Expose= events draws or redraws the contents of the app's window.
  - This code will be reached when the window is frist mapped, and whenever a portion of the window becomes visible.

+ An app can respond to =Expose= events by refreshing only the parts of the window exposed, or by refreshing the entire window.
  - The former is possible because the event structure for each =Expose= event carries the position and dimensions of a single rectangular exposed area.

#+name: Example 3-14. The XExposeEvent structure
#+begin_src c
typedef struct {
   int type;
   unsigned long serial;/* # of last request processed by server */
   Bool send_event;     /* True if this came from SendEvent request */
   Display *display;    /* Display the event was read from */
   Window window;
   int x, y;
   int width, height;
   int count;           /* If nonzero, at least this many more */
} XExposeEvent;
#+end_src

+ Several =Expose= expose events can occur because of a single WM operation, as shown in Figure 3-2.
  - If window E were raised, 4 =Expose= events will be sent to it.
  - The =height= and =width= members in each event structure would correspond to the dimensions of the areawhere each of the windows overlapped window E, and the =x= and =y= members would specify the upper-left corned of each area relative to the origin of window E.
  - All the =Expose= events generated by a single action are guaranteed to be contiguous in the event queue.

#+name: Figure 3-2. Multiple Expose events generated from a single user action
#+attr_html: :width 500px
[[./imgs/fig3_2.png]]

+ Whether an app should draw the whole window or just the exposed parts depends on the complexity of the drawing in the window.
  - If all the window contents are simple for both the app and the server to draw, the entire window contents can be redrawn without a performance problem.
  - This approach works well as long as the window is only redrawn once, event if multiple =Expose= events occur because of a single user action.
  - One trick is to monitor the =count= member of the =Expose= events occur and ignore the =Expose= events (do not redraw the window) until this member is =0=.
  - It might seem an even better method to search the entire event queue, removing all =Expose= events that occured on the window, before redrawind. But this isillegal because there may be intervening =ConfigureNotify= evetns in the queue, and responding to an =Expose= event that follows a =ConfigureNotify= evetn too early will result in redrawind the wrong area or not redrawing at the right time.
    - Only /contiguous/ =Expose= events can be skipped.

+ On the other hand, if a window has any elements that can be time consuming for either the app or the serve to redraw, then the app should only redraw the time-consuming elements if they are actually within the exposed areas.

Redrawing time has 2 components uder the application's control:
+ the time the app takes to process the redrawing instructions,
+ the time it takes for the server to actually do the redrawing.
  - Critical, translates directly into waiting by the user.

These are the general rules for which redrawing approach you should choose:
1. If the window is fast to draw, the whole window can be drawn in response to the last =Expose= event in a contiguous series; this means drawing only when the =count= is 0.
   - Anythong that uses the more comples features of the GC, such as wide lines or join styles, or that may have lots of drawing requests should probably be considered slow.
   - Example 3-14
2. For windows that are slow to draw, the app should avoid drawing areas that were not exposed.
   - If the app can figure out which slow drawing request would draw only into areas that were not exposed and these calculations are not time consuming in themselves, then it should *eliminate* these requests.
3. For windows that are slow to draw, the second best approach is to set a clip mask to allow the server to eliminate unnecessary requests.
   - The app can combine all the areas in a contiguous series of expose events into a single clip mask and set this clip mask into the GC.
   - Code for this is slightly more complex than the approach for the window that is fast to draw.

#+name: Example 3-15. Handling Expose events for complex window contents
#+begin_src c
int window_size = BIG_ENOUGH;  /* Or TOO_SMALL to display contents */
Region region;                 /* Coalesce rectangles from all Expose
                                ,* events */
XRectangle rectangle;          /* Place Expose rectangles in here */
     .
     .
/* Create region for exposure event processing */
region = XCreateRegion();
while (1)  {
   XNextEvent(display, &report);
   switch  (report.type) {
   case Expose:
      if (window_size == TOO_SMALL) {
         TooSmall(win, gc, font_info);
         break;
      }
      /* Set rectangle to be exposed area */
      rectangle.x = (short) report.xexpose.x;
      rectangle.y = (short) report.xexpose.y;
      rectangle.width = (unsigned short) report.xexpose.width;
      rectangle.height = (unsigned short) report.xexpose.height;
      /* Union this rect into a region */
      XUnionRectWithRegion(&rectangle, region, region);
      /* If this is the last contiguous expose in a group,
       ,* set the clip region, clear region for next time
       ,* and draw */
      if (report.xexpose.count == 0) {
         /* Set clip region */
         XSetRegion(display, gc, region);
         /* Clear region for next time */
         XDestroyRegion(region);
         region = XCreateRegion();
         /* Place text in window */
         place_text(win, gc, font_info, width, height);
         /* Place graphics in window */
         place_graphics(win, gc, width, height);
      }
      break;
#+end_src

+ For a few apps, being able to redraw the contents of its windows might be very difficult or impossible. there is another method that might be used in this situation.
  - The app could draw into a pixmap and then copy the pixmap to the window each time the window needs redrawing.
  - That way the complete window contents would always be available for redrawing the window on =Expose= events.
  - The disadvantage of this approach is that the server might not have sufficient memory to store many pixmaps in memory (especially on color displays) or it might be slow about copying the pixmap to the window.
  - But this would be a logical way to handle exposure in an app that performs double-buffering.
    - double-buffering is an animation technique that hides the drawing process from the viewer.

+ On high performance graphics workstations, a feature known as *backing store* might also be available to assist in redrawing windows. When available, this feature can be turned on for any window that really requires it.
  - With the backing store on, the server can maintain the contents of the window when it is obscured and even when it is unmapped and capture drawing to the window while it is in one of these states.
  - Resizing the window is something that backing store can't fully take care of. Because it is assumed that most apps need to recalculate the dimensions of their contents to fit a new window size.
    - The app can set an attribute called bit gravity to retain part of the window during a resize, but part of the window is still going to need redrawing if the window is resized larger.

** Where Can I Draw? [3.2.14]
+ Drawing is allowed until the first =Expose= event arrives.
+ The reason involves a feature of X called substructure redirection.

** When Will My Drawing Appear [3.2.15]
+ Graphics drawn may not appear on the screen immediately. This is because X is designed to buffer communications over a network.
+ The requests (to create windows, to map windows, or to draw into them) are queued up in Xlib, waiting for something to happen that requires an immediate communication with the server.
+ The queue of requests waiting to be sent to the server is called /request buffer/. The requests are accumulated in the request buffer until a call to:
  1. Any routine which requests information from the X server
  2. Certain requests for getting events (=XMaskEvent()=, =XNextEvent()=, =XPending()=, =XWindowEvent=)
     - Triggers a communication with the server only if there is no event on Xlib's event queue that matches what the routine is looking for.
     - This is said to /flush/ the request buffer. All requests up do this point will be acted on by the server.
  3. =XFlush()=
  4. =XSync()=

Does it really take a lot of care to make sure that the request buffer gets flushed?
+ If an app handles event types that occur, such as pointer or keyboard events, there is nothing to worry about.
+ If an ap needs to get info from the server by making a call containing the word =Fetch=, =Get=, or =Query=, no problem is likely.
+ An output-only app that handles only =Expose= events would certainly need to call =XFlush()= once in a while.

** Handling REsizing of the Window [3.2.16]
+ The =ConfigureNotify= event tells the app that the window was resized.
  - In this program, we pass this info to the routines that draw, so that they can position things properly.
  - We also see if the new size if less than the minimum useful size that we set as a size hint for the window manager.
    - If it is smaller in either dimension, then we set the flag =window_size= so that the next time and =Expose= event arrives, we display the message "Too Small" instead of the usual text

#+name: Example 3-16. basicwin -- the ConfigureNotify event
#+begin_src c
  .
  .
  .
case ConfigureNotify:
   /* Window has been resized; change width and height to
    * send to place_text and place_graphics in next Expose */
   width = report.xconfigure.width;
   height = report.xconfigure.height;
   if ((width < size_hints−>min_width) ||
         (height < size_hints−>min_height))
      window_size = TOO_SMALL;
   else
      window_size = BIG_ENOUGH;
   break;
  .
  .
  .
#+end_src

** Exiting the Program [3.2.17]
This program uses a key or button press to exit.
+ To cleanly exit, a client should free all the memory it has allocated, particularly X resources, ant then close the display connection with =XCloseDisplay()=

#+name: Example 3-17. Closing the display connection and freeing resources
#+begin_src c
case ButtonPress:
        /* Trickle down into KeyPress (no break) */
case KeyPress:
        XUnloadFont(display, font_info−>fid);
        XFreeGC(display, gc);
        XCloseDisplay(display);
        exit(1);
#+end_src

+ It is good practice to use =XCloseDisplay()= event though the connection to the server is closed automatically and a process exits.

** Error Handling [3.2.18]
+ On the =XOpenDisplay()= call, we check for the error return, tell the user what server the attempt was made to connect, and exit gracefully.
+ For all other errors, we depend on the default error-handling mechanisms.

+ Not all protocol errors cause the error handler to be invoked.
  - Some errors are indicated by returned values of type =Status= on the appropriate routine. Any routine that returns =Status= will have need its return value tested.

** Summary [3.2.19]
The basic steps that we took are as follows:
1. Open connection to server.
2. Make sure connection succeeded, print error and exit if not.
3. Get display dimensions.
4. Calculate desired size of window and create window.
5. Create pixmap for icon.
6. Initialize XSizeHint structure.
7. Set standard properties for window manager.
8. Select desired event types.
9. Map window.
10. Set up event gathering loop.
11. If event is of type Expose, draw contents of window.
12. If event is of type ConfigureNotify, recalculate dimensions of window.
13. If event is ButtonPress or KeyPress, close the display and exit.

14. The order of these steps is important only up to the point where the window is mapped.
